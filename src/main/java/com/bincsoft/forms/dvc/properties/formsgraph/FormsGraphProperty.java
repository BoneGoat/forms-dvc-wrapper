package com.bincsoft.forms.dvc.properties.formsgraph;

import com.bincsoft.forms.properties.IFormsProperty;

/**
 * Enum which holds all definitions of property handlers for {@link com.bincsoft.forms.FormsGraph}.
 */
public enum FormsGraphProperty implements IFormsProperty {
    /**
     * Applies the data stored in the FormsGraph internal datastore to the actual BI Graph instance managed by a BeanContainer in Forms.
     *
     * {@code SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_DATA_TO_GRAPH',);}
     *
     * <p>Call this property to update the graphical representation whenever changes have been made to the represented data stored in the bean data store.</p>
     */
    ADD_DATA_TO_GRAPH("AddDataToGraph"),

    /**
     * Show or hide a specific index line.
     *
     * @deprecated  Replaced by {@link #ADD_REFERENCE_OBJECT}
     */
    @Deprecated
    DISPLAY_INDEX_LINE("DeprecatedProperty"),

    /**
     * Sets the debug prefix.
     *
     * @deprecated
     * <p>The BI Bean Graph can have multiple instances in one Forms application, each in its own
     * Forms Bean Container. If debugging is activated for all graphs then the debug information
     * written to the Java console (the Jinitiator panel) does not tell which bean is writing it.
     * To distinguish bean messages the SET_DEBUG_PREFIX property can be set to identify the output
     * of a bean container.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_DEBUG_PREFIX','block1.BeanArea1');}
     *
     * <p>The debug output generated by this bean now looks like:</p>
     *
     * <p>block1.BeanArea1 ==> ENABLE_TOOLTIPS: setting label tooltips</p>
     * <p>block1.BeanArea1 ==> RETURN VALUES: trying to set return value ....</p>
     * <p>block1.BeanArea1 ==> RETURN VALUES: ... to COLUMNLABEL</p>
     */
    @Deprecated
    SET_DEBUG_PREFIX("DeprecatedProperty"),

    /**
     * @deprecated Replaced by {@link #SHOW_GRAPH_IN_FRAME}
     *
     * Property registered to set the width and hight for the Graph external frame.
     *
     * <p>The size is passed as a string representing two integer values. The syntax is
     * {@code height<delimiter>width}. This property is defaulted to 200,300 and if set only has an effect
     * on graphs running in a separate frame.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_FRAME_HEIGHT_WIDTH','200,300');}
     */
    @Deprecated
    SET_FRAME_HEIGHT_WIDTH("DeprecatedProperty"),

    /**
     * @deprecated Replaced by {@link #SHOW_GRAPH_IN_FRAME}
     *
     * Forms property registered to show the external graph frame.
     *
     * <p>This feature is used when running the Graph in an external frame to the Forms window. It is to
     * unhide a frame that previously was hidden.</p>
     * {@code set_custom_property('block1.BeanArea1',1,'SHOW_FRAME',);}
     */
    @Deprecated
    SHOW_FRAME("DeprecatedProperty"),

    /**
     * @deprecated Replaced by {@link #ADD_REFERENCE_OBJECT}
     *
     * Property registered to show an index line in the graph.
     *
     * <p>The index line can be used to show boundary conditions like min-revenue.</p>
     * <p>The following arguments are expected in this order:</p>
     * <ol>
     * <li>String = the text that is associated with the index line</li>
     * <li>boolean = show/hide index label in graph legend. Valid values are true or false</li>
     * <li>String = the axis, valid values are y-axis and x-axis</li>
     * <li>int = each axis can have max 3 index lines. The counting of the lines is from 0 to 2</li>
     * <li>double = the value of the index line</li>
     * <li>the color of the index line: Accepted colors: black, blue, cyan, darkGray, gray, green, lightGray, magenta, orange, pink, red, white</li>
     * <li>int index line width, a value > 0 to determine the width of the index line Note that following arguments have default values, which means they can be omitted: line width [default = 1], color of index line [default = red]</li>
     * </ol>
     * <p>The following example sets an index line with the label "Min Revenue". The label
     * "Min Revenue" is shown in the graph's legend, indicated by the second argument 'true'.
     * The index line is set for the Y axis, as indicated by the third argument 'y-axis'. Its
     * the first index line - indicated by the argument 0 - and its displayed in the hight of the
     * y-axis value 1000. The index line color is specified as green and its thickness as 2.</p>
     *
     * {@code set_custom_property('BeanArea',1,'ADD_INDEX_LINE','Min Revenue,true,y-axis,0,1000.00,green,2');}
     *
     * <h3>Updated info</h3>
     * <p>In newer versions of oracle.dss.graph.Graph there is support for an unlimited number of index lines. To use this updated functionality, use ADD_REFERENCE_OBJECT.</p>
     * <ul>
     * <li>Y1AXIS (Default)</li>
     * <li>Y2AXIS</li>
     * <li>X1AXIS</li>
     * <li>SERIES</li>
     * <li>x-axis (Kept for backwards compatibility, maps to X1AXIS)</li>
     * </ul>
     */
    @Deprecated
    ADD_INDEX_LINE("AddIndexLine"),

    /**
     * Adds a reference value to the graph like an index line or area.
     *
     * <p>Values are expected in the following order:</p>
     * <ol>
     * <li>Type (AREA or LINE)</li>
     * <li>Text</li>
     * <li>Association axis</li>
     * <li>Color</li>
     * <li>Show in legend as boolean</li>
     * <li>Line width as integer</li>
     * <li>Line style (SOLID, DASH, DASH_DOT or DOTTED)</li>
     * <li>Location (FRONT or BACK)</li>
     * <li>Value as double (Low value for AREA, line value for LINE)</li>
     * <li>Value as double (High value for AREA, optional for LINE)</li>
     * </ol>
     * <pre>{@code
     * set_custom_property('block1.BeanArea1',1,'LINE,Reference1,Y1AXIS,red,true,2,SOLID,FRONT,1000');
     * set_custom_property('block1.BeanArea1',1,'AREA,Reference2,Y1AXIS,blue,true,1,SOLID,BACK,1000,2000');
     * }</pre>
     * <p>Valid Association axis values</p>
     * <ul>
     * <li>Y1AXIS (Default)</li>
     * <li>Y2AXIS</li>
     * <li>X1AXIS</li>
     * <li>SERIES</li>
     * </ul>
     */
    ADD_REFERENCE_OBJECT("AddReferenceObject"),

    /**
     * Adds a row of data to the graph.
     *
     * <p>Data rows can be added to the FormsGraph internal data store before and after calling
     * ADD_DATA_TO_GRAPH. However, if no data is available when the ADD_DATA_TO_GRAPH property
     * is set, then no graph will show. The ADD_ROWDATA property appends a new row to the datastore.
     * The syntax of the argument passed with ADD_ROWDATA is determined by the BI Bean Graph
     * relational API and expects the column label to be passed as a first argument, the row
     * label as a second and the cell value as a third. If the Graph is to be used as a master
     * in a master/detail relation, then optional a forth argument can be passed representing the
     * primary key.</p>
     * <p>
     * {@code SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','Europe,Sales,25000');}
     * or
     * {@code SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','Europe,Sales,25000,12');}
     * </p>
     * <p>In both cases the Series, or column name, is 'Europe', while the data, or row label, is 'Sales'.
     * The first example shows a row with no primary key added, while the second example contains the
     * primary key. The comma is the default delimiter for the number of arguments passed. The delimiter
     * can be changed using the SET_DELIMITER property, which you may find helpful in situations where
     * e.g. labels contain commas. To create three rows (Sales,Taxes,Savings) with 2 columns (Europe,USA)
     * and to show them in the graph, in Forms you call:</p>
     * <pre>{@code
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','Europe,Sales,25000');
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','USA,Sales,70000');
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','Europe,Taxes,2500');
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','USA,Taxes,2500');
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','Europe,Savings,22500');
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_ROWDATA','USA,Savings,67500');
     * SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'ADD_DATA_TO_GRAPH',);
     * }</pre>
     * <p>The row labels show on the X-axis for vertically presented graphs and on the Y-axis for
     * horizontal graph types. The Column labels show in the graph legend.</p>
     */
    ADD_ROWDATA("AddRowData"),

    /**
     * Used to align the text of either the title, the subtitle or the footer.
     *
     * <p>Allowed alignment attributes are "LEFT", "RIGHT" and "CENTER". One property call can be
     * used to set multiple title alignments. The following argument syntax sets the alignment of the
     * title, the subtitle and finally the footer: 'title=CENTER,subtitle=LEFT,footnote=CENTER'. The
     * default delimiter is a comma (',') if not set other using the SET_DELIMITER property. Values
     * can be omitted from right to left, which means that the footnote attribute can be omitted when
     * setting the title and subtitle alignment. The subtitle attribute can be omitted if the footnote
     * as well is omitted.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'ALIGN_TITLE_TEXT','title=CENTER,subtitle=LEFT');}
     *
     * <p>The example above aligns the title to the center of the graph and the subtitle to the left.</p>
     */
    ALIGN_TITLE_TEXT("AlignTitleText"),

    /**
     * Sets the type of information displayed in tooltips.
     *
     * <p>Hovering the mouse over a graph component like a bar in a bar graph, shows a configurable set
     * of information in form of tooltips. Allowed arguments when calling ENABLE_TOOLTIPS from a
     * Forms SET_CUSTOM_PROPERTY() built-in are:</p>
     * <ul>
     * <li>"ALL" - show detail information (default)</li>
     * <li>"LABELS" - labels only</li>
     * <li>"VALUES" - show dat avalues only</li>
     * <li>"NONE" - show no tooltips</li>
     * </ul>
     *
     * <pre>{@code
     * set_custom_property('block1.BeanArea1',1,'ENABLE_TOOLTIPS','ALL');
     * set_custom_property('block1.BeanArea1',1,'ENABLE_TOOLTIPS','VALUES');
     * set_custom_property('block1.BeanArea1',1,'ENABLE_TOOLTIPS','NONE');
     * }</pre>
     */
    ENABLE_TOOLTIPS("EnableTooltips"),

    /**
     * This property is registered to be used with pie graphs.
     *
     * <p>By specifying a slice in a pie by its number and an integer value for the distance, the slice gets
     * exploded from the rest of the pie. Note that the slice is not returned automatically but must be
     * returned manually. By this it is possible to explode more than one slice in a graph.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'EXPLODE_PIESLICE','2,60');}
     *
     * <p>The current number of slices shown in a graph can be retrieved by a call to the COLUMN_COUNT
     * registered property. This returns the number of slices in a pie within a WHEN-CUSTOM-EVENT
     * trigger attached to the Bean area.</p>
     *
     * {@code SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'COLUMNCOUNT',);}
     *
     * <p>The slices of a pie are numbered starting with 0. The following WHEN-CUSTOM-EVENT code retrives
     * the number of columns shown and populates a list in Forms for the user to select a slice number from.</p>
     *
     * <pre>{@code
     * ...
     * IF (eventName='RETURNED_COLUMN_NUMBER') THEN
     *   eventValues := get_parameter_list(:system.custom_item_event_parameters);
     *   get_parameter_attr(eventValues,'GRAPH_INFO',eventValueType, tempString);
     *   -- populate list CONTROL.SLICE_NUMBER
     *   col:=to_number(tempString);
     *   rg := Create_Group('ColumnCount');
     *   -- Add two number columns to the record group
     *   gc1 := Add_Group_Column(rg, 'slice', CHAR_COLUMN,30);
     *   gc2 := Add_Group_Column(rg, 'slice_no', CHAR_COLUMN,30);
     *       FOR i IN 1..col LOOP
     *           Add_Group_Row(rg,i);
     *           Set_Group_Char_Cell(gc1, i,to_char(i));
     *           -- columns in the pie Graph start counting by 0, so the first slice is 0 (i-1)
     *           Set_Group_Char_Cell(gc2, i,to_char(i-1));
     *       END LOOP;
     *   populate_list('bloxk1.list1',rg);
     *   delete_group(rg);
     *   -- set initial value
     *   :CONTROL.SLICE_NUMBER:=0;
     * ELSIF ...
     * }</pre>
     */
    EXPLODE_PIESLICE("ExplodePieSlice"),

    /**
     * Hide the graph's x, y1 and y2 axis.
     *
     * <p>Allowed values are X, Y1, Y2, XY1, XY1Y2, Y1Y2, XY2. To hide the X and Y1 axis but show the Y2
     * axis, call the set_custom_property() built-in with XY1 in the argument.</p>
     *
     * <p>Forms Example:</p>
     *
     * <p>Hiding the X and Y1 axis, showing Y2 axis if used</p>
     *
     * {@code set_custom_property('BeanArea',1,'HIDE_AXIS','XY1');}
     *
     * <p>Hiding the Y1 and Y2 axis, showing the X axis</p>
     *
     * {@code set_custom_property('BeanArea',1,'HIDE_AXIS','Y1Y2');}
     *
     * <p>to reset</p>
     *
     * {@code set_custom_property('BeanArea',1,'HIDE_AXIS',);}
     */
    HIDE_AXIS("HideAxis"),

    /**
     * Define the scale of the y-axis to a fixed maximum value.
     *
     * <p>To use this functionality, pass an integer value as a string argument in the call to
     * set_custom_property(). The string arguments represents the max Y value shown in the graph.
     * To reset to automatic scaling, use 'AUTO' as an argument.</p>
     *
     * <p>Forms Example:</p>
     *
     * {@code set_custom_property('BeanArea',1,'MAX_SCALE_Y_AXIS','150');}
     *
     * <p>To reset back to default:</p>
     *
     * {@code set_custom_property('BeanArea',1,'MAX_SCALE_Y_AXIS','AUTO');}
     */
    MAX_SCALE_Y_AXIS("MaxScaleYAxis"),

    /**
     * Define the scale of the y-axis to a fixed minimum value.
     *
     * <p>To use this functionality, pass an integer value as a string argument in the call to
     * set_custom_property(). The string arguments represent the min Y value shown in the graph.
     * To reset to automatic scaling, use 'AUTO' as an argument.</p>
     *
     * <p>Forms Example:</p>
     *
     * {@code set_custom_property('BeanArea',1,'MIN_SCALE_Y_AXIS','100');}
     *
     * <p>to reset</p>
     *
     * {@code set_custom_property('BeanArea',1,'MIN_SCALE_Y_AXIS','AUTO');}
     */
    MIN_SCALE_Y_AXIS("MinScaleYAxis"),
    
    /**
     * {@link #MAX_SCALE_Y_AXIS}
     */
    MAX_SCALE_Y2_AXIS("MaxScaleY2Axis"),
    
    /**
     * {@link #MIN_SCALE_Y_AXIS}
     */
    MIN_SCALE_Y2_AXIS("MinScaleY2Axis"),

    /**
     * Enable or disable mouse interactivity requiring Forms Server interaction.
     *
     * <p>This property should be called to switch off mouse interactivity whenever no values shall be
     * returned from the Graph to Forms (static graphs). Allowed arguments passed with the call to
     * MOUSEACTION property are 'true' or 'false', where true is used to enable mouse actions while
     * false disables it.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'MOUSEACTION','false');}
     */
    MOUSE_ACTION("MouseAction"),

    /**
     * Manually set the position of the legend shown in the graph.
     *
     * <p>The default setting is to auto layout the legend. Use TOP, LEFT, RIGHT, BOTTOM or AUTO as
     * an argument when calling set_custom_property()</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'POSITION_LEGEND','LEFT');}
     */
    POSITION_LEGEND("PositionLegendArea"),

    /**
     * Rotate the x-Label by 0, 90 or 270 degrees.
     *
     * {@code set_custom_property('BeanArea',1,'ROTATE_X_LABEL','90');}
     */
    ROTATE_X_LABEL("RotateXLabel"),

    /**
     * Display a scrollbar on the Graph if needed.
     *
     * <p>Set value to true for enablig the scrollbar (default) or false to disable the scrollbar.
     * The default is false as this feature is only required if too many data columns are shown that
     * do not fit into the graph.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SCROLLBAR','true');}
     */
    SCROLLBAR("ScrollBar"),

    /**
     * Logarithmic scale the Y and X Axis.
     *
     * <p>The following information must be passed as an argument when calling SET_SCALED_LOGARITHMIC:</p>
     * <ol>
     * <li>The axis identifier - 'X' or 'Y'</li>
     * <li>'true' or 'false' to symbolize whether logarithmic scale is enabled</li>
     * <li>The value for the logarithmic base</li>
     *
     * <p>The delimiter used must match the currently defined delimiter, which is by default ','.</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_SCALED_LOGARITHMIC','Y,true,2');}
     *
     * <p>This creates a graphs with a logarithmic scaled Y axis with a base of 2. The base is provided
     * as a double value.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_SCALED_LOGARITHMIC','X,true');}
     *
     * <p>Note that there is always only one axis that shows the value of the graph. The ability to set
     * the X axis to scale logarithmic in this bean is not used because the row label is of type String.
     * This may change in a future version based on customer feedback.</p>
     */
    SET_SCALED_LOGARITHMIC("ScaledLogarithmic"),

    /**
     * Set the marker type of a series identified by its name.
     *
     * <p>The default value is MT_DEFAULT. Other values are MT_AREA and MT_BAR. To show a line graph in
     * front of a bar graph, call SET_SERIES_MARKER_TYPE for the series name that should be rendered as
     * a bar graph. Note that the graph type must be set to one of the graph series types for this
     * feature to work.</p>
     *
     * <p>Forms Example:</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_MARKER_TYPE','<series name>,<marker type>');}
     *
     * <p>To show a specific series as a bar graph within a line chart:</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_MARKER_TYPE','Salary,MT_BAR');}
     *
     * <p>To show a specific series as an area graph within a line chart:</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_MARKER_TYPE','Salary,MT_AREA');}
     */
    SET_SERIES_MARKER_TYPE("SeriesMarkerType"),
    SET_SERIES_Y_AXIS("SeriesYAxis"),

    /**
     * Show/hide the labels shown on the x and y axis.
     * 
     * <p>Labels are shown by default, to hide labels pass a value of false as an argument for the
     * Forms property. Use the following syntax: 'x=false,y1=true' to show labels for the y1 axis but
     * to hide labels for the x axis. You can omit the outer right value if no change is needed
     * e.g. 'x=true'.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SHOW_LABELS','x=false,y=true');}
     */
    SHOW_LABELS("ShowLabels"),

    /**
     * Clears the graph data store.
     * 
     * <p>This must be done before adding new data to the datastore. If using ADD_ROWDATA without before
     * calling CLEAR_DATA, then the new row is appended to the list of existing rows. In a drilldown
     * scenario CLEAR_GRAPH makes sure that the detail graph shows the right data. CLEAR_GRAPH does not
     * require an additional argument to be passed.</p>
     *
     * <@code set_custom_property('block1.BeanArea1',1,'CLEAR_GRAPH',);}
     */
    CLEAR_GRAPH("ClearGraph"),
    ENABLE_MARKERTEXT("EnableMarkerText"),
    ENABLE_GRADIENT("EnableGradient"),

    /**
     * Exports the currently displayed graph into the system clipboard.
     *
     * {@code set_custom_porperty('BeanArea', 1, 'EXPORT_CLIPBOARD',);}
     */
    EXPORT_CLIPBOARD("ExportToClipboard"),

    /**
     * Determine the xy position of the external graph window on the screen.
     * 
     * <p>The default position is 0:0.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'FRAME_POS','100,200');}
     */
    FRAME_POS("FramePos"),

    /**
     * Shows the graph in a separate frame.
     * 
     * <p>For the BI Bean Graph to initialize it is important that the Forms Bean Container used is
     * visible on the Canvas and at least has a size of 1x1 pixel. You can hide this widget by setting
     * its border to 'None' and the background color to the color of the canvas, using the property
     * palette of the Bean Area.</p>
     *
     * {@code set_custom_property('BeanArea',1,'SHOW_GRAPH_IN_FRAME',);}
     */
    SHOW_GRAPH_IN_FRAME("GraphInFrame"),
    SHOW_GRAPH("AddGraphToBean"),

    /**
     * Hide the external graph frame.
     *
     * {@code set_custom_property('BeanArea',1,'HIDE_FRAME',);}
     */
    HIDE_FRAME("HideFrame"),
    
    /**
     * Sets the type of the graph from Forms.
     * 
     * <p>Note that some of the supported graph types show the values in percent. However, the tooltips
     * always show the value in absolute numbers. The following graph types are supported, where the
     * name in uppercase is supplied as an argument with the call to GRAPHTYPE.</p>
     * 
     * <p>For valid graph types, see {@link com.bincsoft.forms.dvc.GraphTypeRegistry}
     * and {@link oracle.dss.graph.GraphConstants}.</p>
     *
     * <p>Examples:</p>
     *
     * <p>RING_BAR ==> {@code set_custom_property('block1.BeanArea1',1,'GRAPHTYPE','RING_BAR_GRAPH');}</p>
     *
     * <p>PIE_BAR ==> {@code set_custom_property('block1.BeanArea1',1,'GRAPHTYPE','PIE_BAR_GRAPH');}</p>
     *
     * <p>MULTI_PIE_GRAPH ==> {@code set_custom_property('block1.BeanArea1',1,'GRAPHTYPE','MULTI_PIE_GRAPH');}</p>
     */
    GRAPHTYPE("GraphType"),

    /**
     * Hide the graph, not showing in the Bean area container.
     *
     * <p>This functionality is e.g. useful to hide the graph when no data was provided or as a result
     * of a user action. Alternatively to hiding the graph when no data is shown, a customizable text
     * string can be shown. Showing a string is useful e.g. in a master/detail scenario where not all
     * master records have details.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'HIDE_GRAPH',);}
     */
    HIDE_GRAPH("HideGraph"),

    /**
     * Change one column in a bar graph or one slice in a pie graph for a partial graph update.
     * 
     * <p>The row that needs an update is identified by its current column label, row label and value.
     * The new value is passed as a forth argument.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'MODIFY_ROW_DATA','ColumnName,RowName,OldValue,NewValue');}
     *
     * <p>The default delimiter, as shown in this example, is a comma, but can be chosen different
     * calling the {@link com.bincsoft.forms.properties.FormsProperty#SET_DELIMITER} property.</p>
     */
    MODIFY_ROW_DATA("ModifyData"),

    /**
     * Remove a data row from the graph without refreshing the whole graph data storage.
     * 
     * <p>If the data row has an associated primary key, then this gets deleted as well. The row to delete
     * is identified by the column label, the row label and the current value. The limitation is that the
     * combination of these three values must be unique within the graph for this feature to work.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'REMOVE_DATA','SALARY,SMITH,1700');}
     */
    REMOVE_DATA("RemoveData"),

    /**
     * Hides the graph title text if displayed.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'HIDE_TITLE',);}
     */
    HIDE_TITLE("RemoveTitle"),

    /**
     * Hides the graph subtitle text if displayed.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'HIDE_SUBTITLE',);}
     */
    HIDE_SUBTITLE("RemoveSubTitle"),

    /**
     * Hides the graph footer text if displayed.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'HIDE_FOOTER',);}
     */
    HIDE_FOOTER("RemoveFooter"),

    /**
     * Hides the graph title text defines for the x-axis if displayed.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'HIDE_X_TITLE',);}
     */
    HIDE_X_TITLE("RemoveXTitle"),

    /**
     * Hides the graph title text defines for the x-axis if displayed.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'HIDE_Y_TITLE',);}
     */
    HIDE_Y_TITLE("RemoveYTitle"),

    /**
     * Determine the type of data returned by the bean as a result of a user mouse click.
     * 
     * <p>Allowed arguments are</p>
     * <ul>
     * <li>ALL</li>
     * <li>ROWLABEL</li>
     * <li>COLUMNLABEL</li>
     * <li>VALUE</li>
     * <li>PRIMARY_KEY</li>
     * </ul>
     *
     * <p>The primary is returned only if it was passed using the {@link #ADD_ROWDATA} property.</p>
     *
     * <p>Forms Example:</p>
     *
     * <p>Forms example for a master/detail Graph. Code added to the WHEN-CUSTOM-EVENT Trigger on the PJC.
     * MASTERGRAPH {@code set_custom_property('block1.BeanArea',1,'RETURN_VALUES_ON_CLICK','ALL');}</p>
     *
     * <p>to retrieve the returned data value in Forms:</p>
     * <pre>{@code
     * DECLARE
     *  eventName varchar2(30) := :system.custom_item_event;
     *  tempString varchar2(100);
     *  eventValues ParamList;
     *  eventValueType number;
     * BEGIN
     * IF (eventName='GRAPH_ACTION') THEN
     *  eventValues := get_parameter_list(:system.custom_item_event_parameters);
     *  get_parameter_attr(eventValues,'GRAPH_INFO',eventValueType, tempString);
     *  -- ... do something with value in tempString ...
     * ELSE ...
     * }</pre>
     */
    RETURN_VALUES_ON_CLICK("ReturnValues"),
    
    /**
     * Resets the graph.
     */
    RESET_GRAPH("ResetGraph"),

    /**
     * Set the graph's background color.
     * 
     * <p>The background color excludes the plot area which can be set by another property. The color
     * must be passed as sRGB color in a comma separated string, with the specified red, green, and blue
     * values in the range (0 - 255), e.g. '255,255,255' for white. Basic colors: black, blue, cyan,
     * darkGray, gray, green, lightGray, magenta, orange, pink, red, white can be passed in clear text.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_BACKGROUND','120,234,123');}
     */
    SET_BACKGROUND("BackgroundColor"),

    /**
     * Enable / disable symbolic data value markers shown in line graphs.
     * 
     * <p>To enable this feature pass 'true' as an argument with the set_custom_property() call.
     * Use 'false' to switch it off (default)</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_LINEGRAPH_MARKER','true');}
     */
    SET_LINEGRAPH_MARKERS("LineGraphMarkers"),
    SET_GRAPH_BASELINE("BaseLine"),

    /**
     * Graphic antialiasing.
     * 
     * <p>If set to "true" smoothes the representation of line graphs and shows curves instead of steps
     * from one value to the next. Allowed values are true and false.</p>
     *
     * {@code set_custom_property('BeanArea',1,'GRAPH_ANTIALIASING','true');}
     */
    SET_GRAPHIC_ANTIALIASING("Antialiasing"),

    /**
     * Creates a 3D appearance of a graph by creating it's shadow.
     * 
     * <p>The depth is provided in pixel for the width and a degree between 0 and 180 for the orientation.
     * Specify both values in one call, where the fist value determines the depth and the second the angle.
     * The delimiter is the actual delimiter defined or ',' if choosing the default. To se a depth of
     * 20 pixel and a radius of 10 degrees, set the attribute value of this Forms property to
     * '20,10' (if the default delimiter id used).</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_DEPTH','30,75');}
     */
    SET_DEPTH("Depth"),

    /**
     * Set the message shown when no data is available for the graph to render.
     * 
     * <p>This is the case whenever a master-detail relationship does not have detail data.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_NO_DATA_FOUND','Sorry - we are out of data today');}
     *
     * <p>Note that the default delimiter needs to be changed if the message contains a comma.</p>
     */
    SET_NO_DATA_FOUND("NoDataFoundMessage"),

    /**
     * Sets the border and background color of the legend shown in a graph.
     * 
     * <p>The color can be provided as a RGB encoded value e.g. 120,234,220 or as a named color
     * e.g. red, orange or green. The first value passed is for the border, the second for the
     * background. '120,200,220|223,223,100' If one or both setting should be transparent, then
     * pass 'TRANSPARENT' as a color name. E.g. 'Transparent|123,334,120'. Note that in this case the
     * default delimiter must be changed since the color coding requires ',' as a delimiter.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_LEGEND_BORDER','blue,yellow');}
     *
     * <p>or</p>
     * <pre>{@code
     * set_custom_property('block1.BeanArea1',1,'SET_DELIMITER','#');
     *set_custom_property('block1.BeanArea1',1,'SET_LEGEND_BORDER','120,120,120#220,23,120');
     *set_custom_property('block1.BeanArea1',1,'SET_DELIMITER',',');
     * }</pre>
     *
     * <p>or</p>
     *
     * <pre>{@code
     * set_custom_property('block1.BeanArea1',1,'SET_DELIMITER','#');     
     *set_custom_property('block1.BeanArea1',1,'SET_LEGEND_BORDER','TRANSPARENT#220,23,120');
     *set_custom_property('block1.BeanArea1',1,'SET_DELIMITER',',');
     * }</pre>
     */
    SET_LEGEND_BORDER("LegendBorder"),

    /**
     * Set the color of the Plot Area.
     * 
     * <p>If not set then the area is chosen to be white. The color must be passed as RGB color in a
     * comma separated string, with the specified red, green, and blue values in a range of (0 - 255),
     * e.g. '255,255,255' for white. Basic colors: black, blue, cyan, darkGray, gray,green, lightGray,
     * magenta, orange, pink, red, white can be passed in clear text.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_PLOT_AREA_COLOR','120,255,120');}
     */
    SET_PLOT_AREA_COLOR("PlotAreaColor"),

    /**
     * Sets the background color of the title text field.
     * 
     * <p>Normally you want that color be set to the same value as the background, but sometimes having
     * this appear in a different color may make sense. The color must be passed as RGB color in a comma
     * separated string, with the specified red, green, and blue values in the range (0 - 255),
     * e.g. '255,255,255' for white. Basic colors: black, blue, cyan, darkGray, gray, green, lightGray,
     * magenta, orange, pink, red, white can be passed in clear text.</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_TITLE_BACKGROUND','255,255,255');}
     */
    SET_TITLE_BACKGROUND("TitleBackgroundColor"),

    /**
     * Sets the background color of the subtitle title text field.
     * 
     * <p>Normally you want that color be set to the same value as the background, but sometimes having
     * this appear in a different color makes sense. The color must be passed as RGB color in a comma
     * separated string, with the specified red, green, and blue values in the range (0 - 255),
     * e.g. '255,255,255' for white. Basic colors: black, blue, cyan, darkGray, gray, green, lightGray,
     * magenta, orange, pink, red, white can be passed in clear text.</p>
     *
     * <p>Forms Example:</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_SUBTITLE_BACKGROUND','120,255,220');}
     */
    SET_SUBTITLE_BACKGROUND("SubtitleBackgroundColor"),

    /**
     * Sets the background color of the graph footer text field.
     * 
     * <p>Normally the color is set to the same value then the background, but sometimes having this
     * appear in a different color may make sense. The color must be passed as RGB color in a comma
     * separated string, with the specified red, green, and blue values in the range (0 - 255),
     * e.g. '255,255,255' for white. Basic colors: black, blue, cyan, darkGray, gray, green, lightGray,
     * magenta, orange, pink, red, white can be passed in clear text.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_FOOTER_BACKGROUND','120,255,120');}
     */
    SET_FOOTER_BACKGROUND("FooterBackgroundColor"),

    /**
     * Sets the width of a series identified by its name.
     * 
     * <p>The default width size is 3.</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_WIDTH','<series name>,<width in pixel>');}
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_WIDTH','Salary,10');}
     */
    SET_SERIES_WIDTH("SeriesWidth"),

    /**
     * Sets the color of a named series.
     * 
     * <p>The color must be passed as RGB color in a comma separated string, with the specified
     * red, green, and blue values in the range (0 - 255), e.g. '255,255,255' for white.
     * Basic colors: black, blue, cyan, darkGray, gray, green, lightGray, magenta, orange, pink,
     * red, white can be passed in plain text.</p>
     *
     * <p>Forms Example:</p>
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_COLOR','<Series name>,<color>');}
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_COLOR','Salary,255,255,255');}
     *
     * {@code set_custom_property('BeanArea',1,'SET_SERIES_COLOR','Salary,red');}
     */
    SET_SERIES_COLOR("SeriesColor"),

    /**
     * Sets the y-Axis number type to a custom string.
     * 
     * <p>The number type is shown as a prefix in front of the number value.</p>
     *
     * <p>Forms Example:</p>
     *
     * <pre>{@code
     *--Setting a currency value for Euro
     *set_custom_property('BeanArea',1,'SET_Y1_NUMBER_TYPE','EURO');
     *--Setting value to $
     *set_custom_property('BeanArea',1,'SET_Y1_NUMBER_TYPE','$');
     *--Setting back to normal
     *set_custom_property('BeanArea',1,'SET_Y1_NUMBER_TYPE','GENERAL');
     * }</pre>
     */
    SET_Y1_NUMBER_TYPE("Y1NumType"),
    SET_Y1_SCALE_DOWN("Y1ScaleDown"),
    SET_Y_DECIMAL_DIGITS("YDecimalDigits"),
    SET_Y2_DECIMAL_DIGITS("Y2DecimalDigits"),

    /**
     * Sets the graph style using predefined styles.
     *
     * <p>Valid style names are:</p>
     * <ul>
     *    <li>April</li>
     *    <li>Autumn_simple</li>
     *    <li>Blackwhite</li>
     *    <li>Comet</li>
     *    <li>Confetti</li>
     *    <li>Earth</li>
     *    <li>Executive</li>
     *    <li>Financial</li>
     *    <li>Glass</li>
     *    <li>Gradient</li>
     *    <li>Nautical</li>
     *    <li>Projection</li>
     *    <li>Regatta_simple</li>
     *    <li>Southwest</li>
     *    <li>Transparent</li>
     * </ul>
     */
    SET_STYLE("Style"),

    /**
     * Sets the graph style like colors and effects using an XML string.
     * 
     * <p>In the JAR archive named dvt-jclient.jar there is an oracle/dss/graph/Graph.dtd which hints
     * about the structure of the style XML.</p>
     */
    SET_XML_STYLE("XmlStyle"),

    /**
     * Shows the legend text within a pie graph.
     * 
     * <p>Takes 'TEXT','VALUE','PERCENT' or TEXT_PERCENT' as an argument. The default setting is 'PERCENT'.</p>
     *
     * <p>Forms Example:</p>
     *
     * {@code set_custom_property('BeanArea',1,'SHOW_PIE_LABELS','VALUE');}
     */
    SHOW_PIE_LABELS("ShowPieLabels"),

    /**
     * Show/hide the grid in a graph.
     * 
     * <p>The default value is set to true, use false to hide the grid in the graph</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SHOW_GRID','false');}
     */
    SHOW_GRID("ShowGrid"),

    /**
     * Retrieve the number of groups shown in the graph.
     * 
     * <p>A group in the relational world is a column in a row (e.g. Salary, Commission). The column
     * count is returned in a when-custom-event trigger.</p>
     *
     * <p>Forms Example:</p>
     * {@code set_custom_property('block1.BeanArea1',1,'COLUMNCOUNT',);}
     *
     * <p>In a when-custom-item-event trigger</p>
     *<pre>{@code
     *DECLARE
     *   eventName varchar2(30) := :system.custom_item_event;
     *   tempString varchar2(100);
     *BEGIN
     * IF (eventName='RETURNED_COLUMN_NUMBER') THEN
     *     eventValues := get_parameter_list(:system.custom_item_event_parameters);
     *     get_parameter_attr(eventValues,'GRAPH_INFO',eventValueType, tempString);
     *     -- ... do something with the value stored in tempString ...
     *END;
     *}</pre>
     * 
     * <p>Column count can also be called using the Forms get_custom_property() built-in, eliminating
     * the need for a custom event to be raised.</p>
     *
     * <p>Forms Example:</p>
     * {@code count := get_custom_property('block1.BeanArea1',1,'COLUMNCOUNT');}
     */
    COLUMNCOUNT("SeriesCount"),

    /**
     * Show columns as rows and rows as columns in the Graph.
     * 
     * <p>If specifying the argument passed as "true" then the columns will show as series data and the
     * rows as group data. To switch this presentation back to normal mode, call the same property again
     * and pass "false" as an argument.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SHOW_COLUMNS_AS_ROWS','true');}
     */
    SHOW_COLUMNS_AS_ROWS("ShowColumnsAsRows"),

    /**
     * Show/hide the graph legend.
     * 
     * <p>Argument value are 'true' to show the legend (default) and 'false' to hide the legend.</p>
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SHOW_LEGEND','true');}
     */
    SHOW_LEGEND("ShowLegendArea"),
    
    /**
     * Sets the size of all fonts used in the graph.
     */
    SET_FONT_SIZE("GraphFontSize"),
    
    /**
     * Sets the font name used in the graph.
     */
    SET_FONT_NAME("GraphFontName"),

    /**
     * Set the graph Footer title, font, font style, font size and color.
     * 
     * <p>The following string format is expected: "title string,color,font style,font size,font"</p>
     *
     * <p>For example, to set a Subtitle to "Hello World", the Font to TimesNewRoman, the font style
     * to bold [b] and italic [i] and the color to red the string
     * shows: 'Hello World,red,bi,10,TimesNewRoman'</p>
     *
     * <p>The color can be specified as color name or as a sRGB value in a range from (0..255).
     * Values can be omitted from right to left. Passing color values as RGB values may require
     * switching the default delimiter as the comma must be used to set RGB values.</p>
     *
     * <p>Forms Example:</p>
     * {@code set_custom_property('block1.BeanArea1',1,'SET_FOOTER','Hello World,red,bi,10,TimesNewRoman');}
     *
     * <p>or</p>
     * <pre>{@code
     *set_custom_property('BeanArea',1,'SET_DELIMITER','#');
     *set_custom_property('BeanArea',1,'SET_FOOTER','Hello World#120,234,120#bi#10#TimesNewRoman');
     *set_custom_property('BeanArea',1,'SET_DELIMITER',',');
     * }</pre>
     */
    SET_FOOTER("Footnote"),

    /**
     * Set the graph Sub title, font, font style, font size and color.
     * 
     * <p>The following string format is expected: "title string,color,font style,font size,font".</p>
     * 
     * <p>For example to set a Subtitle to "Hello World", the Font to TimesNewRoman, the font style to
     * bold [b] and italic [i] and the color to red the string shows: 'Hello World,red,bi,10,TimesNewRoman'</p>
     *
     * <p>The color can be specified as color name or as a sRGB value in a range from (0..255).
     * Values can be omitted from right to left. Passing color values as RGB values may require switching
     * the default delimiter as the comma must be used to set RGB values.</p>
     * {@code set_custom_property('block1.BeanArea1',1,'SET_SUBTITLE','Hello World,red,bi,10,TimesNewRoman');}
     *
     * <p>or</p>
     * <pre>{@code
     *set_custom_property('block1.BeanArea1',1,'SET_DELIMITER','#');
     *set_custom_property('block1.BeanArea1',1,'SET_SUBTITLE','Hello World#120,234,120#bi#10#TimesNewRoman');
     *set_custom_property('block1.BeanArea1',1,'SET_DELIMITER',',');
     * }</pre>
     */
    SET_SUBTITLE("Subtitle"),

    /**
     * Set font face, style, size and color of the O1 tick label.
     * 
     * <p>Expects the following parameters: color,style,size,font face</p>
     *
     * <p>For blue bold + italic Arial of size 12:</p>
     * {@code set_custom_property('block1.BeanArea1',1,'SET_X_VALUE_FONT','blue,bi,12,Arial');}
     */
    SET_X_VALUE_FONT("XValueFont"),

    /**
     * Set the x-Axis label.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_X_LABEL','Hello World X');}
     * <p>or</p>
     * {@code set_custom_property('block1.BeanArea1',1,'SET_X_LABEL','Hello World X,TimeNewRoman,bi');}
     */
    SET_X_LABEL("XLabel"),

    /**
     * Set the graph title, title font, title font style, title font size and title color.
     * 
     * Expecting the following string format: title string,color,fontstyle,font size,fontname.
     * For example to set a Subtitle to "Hello World", the Font to TimesNewRoman, the font style to
     * bold [b] and italic [i] and the color to red the string shows:
     * 'Hello World,red,bi,10,TimesNewRoman' The color can be specified as color name or as a sRGB value
     * in a range from (0..255). Values can be omitted from right to left.</p>
     *
     * <pre>{@code
     *BEGIN
     *  -- the color is defined with comma separated rgb values. The default delimiter
     *  -- must be changed temporarily. Alos set the font type to bold and italic (bi)
     *  SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'SET_DELIMITER','#');
     *  SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'SET_TITLE','Hello World#120,234,120#bi#12');
     *  SET_CUSTOM_PROPERTY('block1.BeanArea1',1,'SET_DELIMITER',',');
     *END;
     * }</pre>
     */
    SET_TITLE("Title"),

    /**
     * Set the y-Axis title.
     *
     * {@code set_custom_property('block1.BeanArea1',1,'SET_Y_LABEL','Hello World Y');}
     */
    SET_Y_LABEL("YLabel"),
    
    /**
     * See {@link #SET_Y_LABEL}
     */
    SET_Y2_LABEL("Y2Label");

    private String handler;

    /**
     * Constructor accepting name of class handling the Forms property.
     * @param handler
     */
    FormsGraphProperty(String handler) {
        this.handler = handler;
    }

    /**
     * Gets the name which is used in Forms of this property.
     * @return
     * @see FormsGraphProperty#name
     */
    @Override
    public String getName() {
        return name();
    }

    /**
     * Gets the class name of the handler for this property.
     * @return
     */
    @Override
    public String getHandler() {
        return this.handler;
    }

    /**
     * Gets the fully qualified name for this property.
     * @return
     */
    @Override
    public String getHandlerFullyQualifiedName() {
        return String.format("%s.%s", this.getClass().getPackage().getName(), this.handler);
    }

    /**
     * Gets a property from a string.
     * @param name
     * @return
     */
    public static IFormsProperty fromString(String name) {
        if (name != null) {
            for (FormsGraphProperty property : FormsGraphProperty.values()) {
                if (name.equalsIgnoreCase(property.getHandlerFullyQualifiedName())) {
                    return property;
                }
            }
        }
        throw new IllegalArgumentException(String.format("Could not find any property named %s", name));
    }

    @Override
    public String toString() {
        return String.format("%s - %s", getName(), getHandler());
    }
}
